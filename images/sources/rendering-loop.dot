digraph rendering_loop {

  fontname="Helvetica";
  labelloc=t;
  rankdir=LR;
  label="Rendering-Loop";

  node [fontname = Courier, labeljust = l, shape = record]; 
  edge [fontname = Courier];

  subgraph cluster_key {
    label="Legend";

    functionBox[label="functionName"];
    functionText[shape=plaintext, style=solid, label="JS Function", width=3.5]

    funcA[label="funcA"];
    funcB[label="funcB"];
    funcA->funcB;
    funcCalling[shape=plaintext, style=solid, label="FuncA periodically calls FuncB", width=3.5]

    funcAOnce[label="funcA"];
    funcBOnce[label="funcB"];
    funcAOnce->funcBOnce [style="dotted"];
    funcCallingOnce[shape=plaintext, style=solid, label="FuncA calls FuncB once on component (page) setup", width=3.5]

    funcAListener[label="funcA"];
    funcBListener[label="funcB"];
    funcAListener->funcBListener [style="dashed"];
    funcCallingListener[shape=plaintext, style=solid, label="FuncA starts listener with callback function FuncB", width=3.5]

    { rank=source;functionText funcCalling funcCallingOnce funcCallingListener}
  }


  start[label="(Ember hook) didRender",shape=ellipse,style=filled,fillcolor=red];

  initRendering[label="initRendering"];
  populateScene[label="populateScene"];
  initListener[label="initListener"];

  onReSetupScene[label="onReSetupScene"];
  onUpdated[label="onUpdated"];
  onResized[label="onResized"];

  cleanAndUpdateScene[label="cleanAndUpdateScene"];

  initInteraction[label="initInteraction", color="blue"];

  start -> initRendering [style="dotted"];
  start -> initListener [style="dotted"];

  initRendering -> populateScene [style="dotted"];
  initRendering -> initInteraction [style="dotted", color="blue"];

  initListener -> onReSetupScene [style="dashed"];
  initListener -> onUpdated [style="dashed"];
  initListener -> onResized [style="dashed"];

  onReSetupScene -> cleanAndUpdateScene [style="solid"];
  onUpdated -> cleanAndUpdateScene [style="solid"];
  onResized -> cleanAndUpdateScene [style="solid"];

  initInteraction -> cleanAndUpdateScene [style="dashed", label="on redrawScene", color="blue",  fontcolor="blue"];
  initInteraction -> initRendering [style="dashed", label="on showApplication", color="green",  fontcolor="green"];

  cleanAndUpdateScene -> populateScene [style="solid"];

}
